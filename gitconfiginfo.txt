Specifically, we will be covering these commands: config, init, clone, add, status, commit, push, pull, log, and reset.

1) Initializing

->Before you read on, I assume you have Git installed. You also want to associate your email address with your account.

$ git config --global user.email "myemail@address.com"


->git init, initializes a new empty repository on your local machine:

$ git init
Initialized empty Git repository in /Users/michaelherman/Documents/repos/github/git-commands/.git/



->git clone <url> clones (or copies) a git repository to your local machine.


$ git clone git@github.com:mjhea0/sinatra-blog.git


->To see the repo, navigate into the directory and then view all files. 
You’ll see a hidden directory called “.git”, which is the actual repository:

$ cd sinatra-blog
$ ls -a


2) Staging

->git add <filename> adds a new file to staging.
git add . adds all files in the current directory and all sub directories to your local working directory. 
git status lists all files ready to be committed, which have been added to staging, and files not currently being tracked by Git. 

$ git add readme.md
$ git add .
$ git status

3) Committing

->you want to move the snapshot from staging to your actual repository
git commit -am ‘<add note>’ commits new and updated files 
moving them from the staging queue to your local repository.

$ git commit -am "initial commit"
[master 93127ee] initial commit
2 files changed, 2 insertions(+)

What does git status say now?

$ git status
# On branch master
nothing to commit (working directory clean)


->git push origin master gathers all the committed files from your local repository and uploads them to a remote repository. 

Before you can push, you must add a remote repository to share your local repository with, which you’ll see in the example.

$ git remote add origin git@github.com:mjhea0/git-commands.git
$ git push origin master


Success! 
Take a look at my remote repo on Github, which has identical copies of my files from my local working directory and repository.


4)Maintaining

simply taking (git add .) and saving (git commit) snapshots. 
Maintaining (both local and remote) and ensuring your local and remote repositories stay in sync can be incredibly time consuming.

->git pull origin master literally pulls the changes made from a remote repository to your local repository.

$ git pull origin master

You may have heard of the fetch and/or merge commands. Well, the pull command literally is a combination of both those commands.
In essence, you are first “fetching” all the changes, then “merging” those changes. 
In the example above, I fetched the changes made to “readme.md”, then merged the two files. 
Keep in mind that most merge situations are never this simple, and problems can arise in the merge process, which can be difficult to solve.

In the example, I changed the text within “test.md” both locally and remotely: - Local: “testing merge” - Remote: “merging test”

If I just try to push or pull like normal, I will run into errors:

$ git pull origin master
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:mjhea0/git-commands
 * branch            master     -> FETCH_HEAD
Updating 15f4b6c..30b7818
error: Your local changes to the following files would be overwritten by merge: test.md
Please, commit your changes or stash them before you can merge.
Aborting

$ git push origin master
To git@github.com:mjhea0/git-commands.git
! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:mjhea0/git-commands.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

->Basically, I can do a fast forward in either direction (PUSH or PULL), which forces the changes by adding an -f to the end of either command:

$ git push origin master -f
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:mjhea0/git-commands.git
+ 30b7818...15f4b6c master -> master (forced update)

->git log is used to view the history of your repository.

$ git log
commit 15f4b6c44b3c8924caabfac9e4be11946e72acfb
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:56:30 2013 -0600

    Update readme.md

commit 93127eed8fa0c3b4df7bbdabd7d6aefa312c31a3
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:45:14 2013 -0600

   initial commit


->git reset --hard <commit number> is used for reverting back to a particular commit. 
Check the logs to find the commit number you want to revert back to. 

$ git log
commit 0f3165bf69b3d508431fa2fe2d5a0b8013637fd2
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 23:38:42 2013 -0600

    another update to readme.md

commit 15f4b6c44b3c8924caabfac9e4be11946e72acfb
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:56:30 2013 -0600

    Update readme.md

commit 93127eed8fa0c3b4df7bbdabd7d6aefa312c31a3
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:45:14 2013 -0600

   initial commit

Let’s say I made that last commit on accident. How do I correct?

$ git reset --hard 15f4b6c44b3c8924caabfac9e4be11946e72acfb
HEAD is now at 15f4b6c Update readme.md


By using the ‘reset’ command I completely discarded the changes from the last commit. 
The file even reverted back. It’s like the changes never happened:

$ git log
commit 15f4b6c44b3c8924caabfac9e4be11946e72acfb
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:56:30 2013 -0600

    Update readme.md

commit 93127eed8fa0c3b4df7bbdabd7d6aefa312c31a3
Author: Michael Herman <hermanmu@gmail.com>
Date:   Thu Oct 10 22:45:14 2013 -0600

   initial commit


Back to the previous state. Yay!


